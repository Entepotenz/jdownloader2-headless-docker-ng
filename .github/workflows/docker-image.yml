# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Create and publish a Docker image

on:
  schedule:
    - cron: "5 4 * * 0" # At 04:05 on Sunday
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

env:
  REGISTRY_GITHUB: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BUILD_PLATFORMS: "linux/amd64"
  BASE_IMAGE: "library/eclipse-temurin:17-jre-jammy"

jobs:
  check-pre-condition:
    name: evaluate if container should be build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    outputs:
      condition_met: ${{ steps.set_output.outputs.run_jobs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: string_lower_case
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ env.IMAGE_NAME }}

      - name: Docker Image Update Checker
        id: baseupdatecheck
        uses: lucacome/docker-image-update-checker@v1
        with:
          base-image: ${{ env.BASE_IMAGE }}
          image: ${{ steps.string_lower_case.outputs.lowercase }}:latest

      - name: determine if we should build
        id: set_output
        env:
          IMAGE_NEEDS_UPDATE: ${{ steps.baseupdatecheck.outputs.needs-updating }}
          GIT_EVENT_NAME: ${{ github.event_name }}
        run: |
          if (( $IMAGE_NEEDS_UPDATE == "true" || $GIT_EVENT_NAME == "push" || $GIT_EVENT_NAME == "pull_request" )); then
            echo "::set-output name=run_jobs::true"
          else
            echo "::set-output name=run_jobs::false"
          fi

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [check-pre-condition]
    if: needs.check-pre-condition.outputs.condition_met == 'true'
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v2 
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }},${{ env.REGISTRY_GITHUB }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          flavor: |
            latest=auto
            prefix=
            suffix=

      - name: Build and push Docker image (WITHOUT ffmpeg)
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ env.BUILD_PLATFORMS }}
          pull: true
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_ffmpeg
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }},${{ env.REGISTRY_GITHUB }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          flavor: |
            latest=auto
            prefix=
            suffix=-ffmpeg

      - name: Build and push Docker image (WITH ffmpeg)
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ env.BUILD_PLATFORMS }}
          pull: true
          file: Dockerfile-ffmpeg
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_ffmpeg.outputs.tags }}
          labels: ${{ steps.meta_ffmpeg.outputs.labels }}

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
